@inject NoteHandlerService noteHandler;

<div class="row pt-2 border border-0 border-bottom border-dark">

	@if (Note.IsDone)
	{
		<div class="col-2 m-auto ps-0">
			<button class="btn btn-outline-success btn-lg border border-0" @onclick="UpdateNoteAndDoneAsync">
				<span class="bi bi-check-square-fill"></span>
			</button>
		</div>
	}
	else
	{
		<div class="col-2 m-auto ps-0">
			<button class="btn btn-outline-dark btn-lg border border-0" @onclick="UpdateNoteAndDoneAsync">
				<span class="bi bi-app"></span>
			</button>
		</div>
	}

	@if (EditModeActive)
	{
		<div class="col-9 p-0">
			<InputText class="form-control" @bind-Value="Note.NoteText" />
		</div>
		<div class="col-1 p-0 m-auto">
			<button class="btn btn-outline-dark border border-0" type="button" @onclick="() => UpdateNoteAndEditAsync()">
				<span class="oi oi-check"></span>
			</button>
		</div>
	}
	else
	{
		<div class="col-9 p-0">
			<label class="col-form-label">@Note.NoteText</label>
		</div>
		<div class="col-1 p-0 m-auto">
			<button class="btn btn-outline-dark border border-0" type="button" @onclick="() => EditModeActive = !EditModeActive">
				<span class="oi oi-pencil"></span>
			</button>
		</div>
	}
</div>



@code {

	[Parameter]
	public NoteVM Note { get; set; } = new();

	public bool Checked { get; set; }

	[Parameter]
	public bool EditModeActive { get; set; } = false;

	public async Task UpdateNoteAndDoneAsync()
	{
		Note.IsDone = !Note.IsDone;

		await UpdateNoteAsync();

	}

	public async Task UpdateNoteAndEditAsync()
	{
		EditModeActive = !EditModeActive;
		await UpdateNoteAsync();
	}

	private async Task UpdateNoteAsync()
	{
		await noteHandler.UpdateNote($"api/note/nid={Note.Id}", Note);
	}
}
