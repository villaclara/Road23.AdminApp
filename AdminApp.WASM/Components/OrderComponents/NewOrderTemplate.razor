@using AdminApp.WASM.Models;
<h3> Order Tepmlate </h3>

<div>
	<label>
		ПІБ отримувача
		<InputText @bind-Value="OrderModel.Name" />
	</label>
	@* <ValidationMessage For="() => NewCandleForm.Name" /> *@
</div>

<div>
	<label>
		Номер телефону
		<InputText @bind-Value="OrderModel.PhoneNumber" />
	</label>
	@* <ValidationMessage For="() => NewCandleForm.Name" /> *@
</div>

<div>
	<label>
		Місто
		<InputText @bind-Value="OrderModel.City" />
	</label>
	@* <ValidationMessage For="() => NewCandleForm.Name" /> *@
</div>

<div>
	<label>
		Адреса доставки
		<InputText @bind-Value="OrderModel.Adress" />
	</label>
	@* <ValidationMessage For="() => NewCandleForm.Name" /> *@
</div>

<div>
	<label>
		Коментар
		<InputText @bind-Value="OrderModel.Comment" />
	</label>
	@* <ValidationMessage For="() => NewCandleForm.Name" /> *@
</div>


<div>
	<label @onclick="() => CandlesExpanded = !CandlesExpanded" @onclick:preventDefault>
		Свічка </label>
	<button type="button" @onclick="() => CandlesExpanded = !CandlesExpanded">click</button>
		
		@if(CandlesExpanded)
		{
				<br />
				@foreach(var candle in CandlesOrdered)
				{
				<span>@candle.Name =</span>
				<button type="button" @onclick="(e) => DecreaseCounterFoChosenCandle(e, candle)">- </button>
				<span>@candle.Quantity</span>
				<button type="button" @onclick="(e) => IncreaseCounterForChosenCandle(e, candle)">+</button>
				<span>@candle.TotalSum</span>
				<br />
				}

		}
	@* <ValidationMessage For="() => NewCandleForm.Name" /> *@
</div>


<div>
	<label>
		Промокод (% або знижка грн)
		<InputText @bind-Value="OrderModel.Promocode" @onclick="() => CandlesExpanded = false" />
		<button type="button" @onclick="(args) => UsePromocode(args, OrderModel.Promocode)">Use</button>
	</label>
	@* <ValidationMessage For="() => NewCandleForm.Name" /> *@
</div>


<div>
	<label>
		Сума
		<InputNumber @bind-Value="OrderModel.Price" @onclick="() => CandlesExpanded = false" />
	</label>
	@* <ValidationMessage For="() => NewCandleForm.Name" /> *@
</div>

@foreach(var candle in CandlesOrdered)
{
	@if(candle.Quantity > 0)
	{
		<p>@candle.Name - @candle.Quantity</p>
	}
}


@code {

	// ordermodel from form models
	[Parameter]
	public NewOrderFormModel OrderModel { get; set; } = null!;

	// needed to display them when adding new candle to order
	[Parameter]
	public IEnumerable<CandleFullVM> Candles { get; set; } = null!;

	// expand/hide candles to add them
	private bool CandlesExpanded { get; set; } = false;

	public ICollection<CandleOrdered> CandlesOrdered { get; set; } = new List<CandleOrdered>();

	// called after received parameters from parent
	protected override void OnParametersSet()
	{
		foreach (var candle in Candles)
		{
			CandlesOrdered.Add(new CandleOrdered { Id = candle.Id, Name = candle.Name, Price = candle.SellPrice, Quantity = 0, TotalSum = 0 });
		}
	}


	// functions for increasing/decreasing counter 
	public void IncreaseCounterForChosenCandle(MouseEventArgs args, CandleOrdered candle)
	{
		candle.Quantity++;
		candle.TotalSum += candle.Price;
		OrderModel.Price += candle.Price;
	}
	public void DecreaseCounterFoChosenCandle(MouseEventArgs args, CandleOrdered candle)
	{
		if(candle.Quantity > 0 && candle.TotalSum >= candle.Price)
		{
			candle.Quantity--;
			candle.TotalSum -= candle.Price;
			OrderModel.Price -= candle.Price;
		}
	}


	// could be 10% or 10 (means -10 grn)
	public void UsePromocode(MouseEventArgs args, string promocodeValue)
	{
		string trimmed = promocodeValue.Trim();
		decimal value = 0;
		if (trimmed.EndsWith('%'))
		{
			bool result = decimal.TryParse(promocodeValue[..^1], out value);
			if (result)
			{
				var howmuch = value * OrderModel.Price / 100;
				OrderModel.Price -= howmuch;
			}
		}
		else
		{

			bool result = decimal.TryParse(promocodeValue, out value);
			if (result && OrderModel.Price > value)
			{
				OrderModel.Price -= value;
			}
		}
	}

	// public class CandleOrdered
	// {
	// 	public int Id { get; set; }
	// 	public string Name { get; set; } = null!;
	// 	public int Quantity { get; set; }
	// 	public decimal Price { get; set; }
	// 	public decimal TotalSum { get; set; }
	// }
}


