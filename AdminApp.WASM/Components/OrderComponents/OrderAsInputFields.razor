@layout OrdersLayout

@using AdminApp.WASM.Models;

<style>
	.hr-line {
		border: 1px black;
	}
</style>

<h3>
	@if (OrderModel.Id != 0)
	{
		<span>Замовлення -</span> @OrderModel.Id
	}
</h3>

<div class="container">
	<div class="pb-2 row">
		<label class="form-label col-5 col-lg-2 col-form-label fw-lighter">
			Дата замовлення
		</label>
		<div class="col-7 col-lg-6">
			<InputDate @bind-Value="OrderModel.DateOrdered" @bind-Value:format="dd/MM/yyyy" class="form-control" />
		</div>
	</div>
	<div class="pb-2 row">
		<label class="form-label col-2 col-lg-2 col-form-label fw-lighter">
			ПІБ
		</label>
		<div class="col-10 col-lg-6">
			<InputText @bind-Value="OrderModel.Name" class="form-control" />
			<ValidationMessage For="() => OrderModel.Name" />
		</div>
	</div>

	<div class="pb-2 row">
		<label class="form-label col-5 col-lg-2 col-form-label fw-lighter">
			Номер телефону
		</label>
		<div class="col-7 col-lg-6">
			<InputText @bind-Value="OrderModel.PhoneNumber" class="form-control" />
		</div>
		<ValidationMessage For="() => OrderModel.PhoneNumber" />
	</div>

	<div class="pb-2 row">
		<label class="form-label col-3 col-lg-2 col-form-label fw-lighter">
			Місто
		</label>
		<div class="col-9 col-lg-6">
			<InputText @bind-Value="OrderModel.City" class="form-control" />
			<ValidationMessage For="() => OrderModel.City" />
		</div>
	</div>

	<div class="pb-2 row">
		<label class="form-label col-5 col-lg-2 col-form-label fw-lighter">
			Адреса доставки
		</label>
		<div class="col-7 col-lg-6">
			<InputText @bind-Value="OrderModel.Adress" class="form-control" />
			<ValidationMessage For="() => OrderModel.Adress" />
		</div>
	</div>

	<div class="pb-2 row">
		<label class="form-label col-3 col-lg-2 col-form-label fw-lighter">
			Коментар
		</label>
		<div class="col-9 col-lg-6">
			<InputText @bind-Value="OrderModel.Comment" class="form-control" />
		</div>
	</div>

	<hr class="hr-line" />

	<div class="pb-2 row">
		<label class="form-label col-5 col-lg-12 col-form-label fw-lighter" @onclick="() => CandlesExpanded = !CandlesExpanded" @onclick:preventDefault>
			Вибрані свічки
		</label>
		<div class="col-6 col-lg-6">
			<button type="button" class="btn btn-sm btn-primary" @onclick="() => CandlesExpanded = !CandlesExpanded">
				<i class="bi bi-check-circle" />
				Вибрати
			</button>
		</div>
	</div>
	@if (CandlesExpanded)
	{
		<div class="row">
			@foreach (var candle in CandlesOrdered)
			{
				<div class="input-group input-group-sm mb-1 border border-secondary border-top-0 border-start-0 border-end-0">
					<span class="col-5 ps-0 m-auto ">@candle.Name</span>
					<button type="button" class="btn shadow-none pe-0" @onclick="(e) => DecreaseCounterForChosenCandle(e, candle)">
						<span class="bi-dash-square-fill m-auto" style="font-size:25px"></span>
					</button>
					<InputNumber class="form-control text-center" style="height: 30px; width: 20px; margin:auto" @bind-Value="candle.Quantity" />
					<button type="button" class="btn shadow-none ps-0" @onclick="(e) => IncreaseCounterForChosenCandle(e, candle)">
						<span class="bi-plus-square-fill m-auto" style="font-size: 25px" aria-hidden="true"></span>

					</button>
					<label class="col-3 m-auto">@candle.TotalSum грн.</label>
				</div>
				<br />
			}

		</div>
	}

	<hr class="hr-line" />

	<div class="pb-2 row">
		<div class="input-group">

		<label class="input-group-text bg-secondarycol-8 col-lg-2  fw-lighter">
			Промокод 
			<small style="font-size: 11px;"> (% або знижка в грн)</small>
		</label>
		<div class="col-2 col-lg-6">
			<InputText class="form-control" @bind-Value="OrderModel.Promocode" @onclick="() => CandlesExpanded = false" />
		</div>
		<div class="col-2 ps-0">
			<button class="btn btn-secondary" type="button" @onclick="(args) => UsePromocode(args, OrderModel.Promocode)">Use</button>
		</div>
		</div>
	</div>

	<div>
		Вибрані свічки:
		@{
			int totalgram = 0;
			@foreach (var candle in CandlesOrdered)
			{
				@if (candle.Quantity > 0)
				{
					<br />

					<span>@candle.Name - @candle.Quantity шт - @(candle.WaxNeededGramm * candle.Quantity) г</span>
					totalgram += candle.WaxNeededGramm * candle.Quantity;
				}
			}
			<br>

			<span>Воску потрібно: </span>

			@totalgram

			<span> г.</span>
		}
	</div>

	<div class="pb-2 row">
		<label class="form-label col-6 col-lg-2 col-form-label fw-lighter">
			Сума
		</label>
		<div class="col-6 col-lg-6">
			<InputNumber @bind-Value="OrderModel.Price" @onclick="() => CandlesExpanded = false" />
			<ValidationMessage For="() => OrderModel.Price" />
		</div>
	</div>

</div>


@code {

	// ordermodel from form models
	[Parameter]
	public NewOrderFormModel OrderModel { get; set; } = null!;

	// needed to display them when adding new candle to order
	[Parameter]
	public IEnumerable<CandleFullVM> Candles { get; set; } = null!;

	// get all chosen candles with quantity > 0
	[Parameter]
	public List<CandleOrdered> CandlesOrdered { get; set; } = new List<CandleOrdered>();


	// expand/hide candles to add them
	private bool CandlesExpanded { get; set; } = false;


	// called after received parameters from parent
	protected override void OnParametersSet()
	{
		// // assigning each candle to CandlesOrdered model with default Quantity and Totalsum
		// foreach (var candle in Candles)
		// {
		// 	CandlesOrdered.Add(new CandleOrdered
		// 		{
		// 			Id = candle.Id,
		// 			Name = candle.Name,
		// 			Price = candle.SellPrice,
		// 			Quantity = 0,
		// 			TotalSum = 0,
		// 			WaxNeededGramm = candle.WaxNeededGram,
		// 			WickDiameterCM = candle.WickDiameterCM
		// 		});
		// }


		// // this needed when editing order and it already has candles ordered
		// // key - candleId
		// // value - quantity of candle
		// foreach (var c in OrderModel.CandleIdAndQuantity)
		// {
		// 	var index = CandlesOrdered.FindIndex(o => o.Id == c.Key);
		// 	CandlesOrdered[index].Quantity = c.Value;
		// 	CandlesOrdered[index].TotalSum = CandlesOrdered[index].Quantity * CandlesOrdered[index].Price;
		// }


		// SEEDING WHILE DEBUGGING
		SeedCandlesOrdered();


	}


	// functions for increasing/decreasing counter
	public void IncreaseCounterForChosenCandle(MouseEventArgs args, CandleOrdered candle)
	{
		candle.Quantity++;
		//candle.TotalSum += candle.Price;
		OrderModel.Price += candle.Price;
	}
	public void DecreaseCounterForChosenCandle(MouseEventArgs args, CandleOrdered candle)
	{
		if (candle.Quantity > 0 && candle.TotalSum >= candle.Price)
		{
			candle.Quantity--;
			//candle.TotalSum -= candle.Price;
			OrderModel.Price -= candle.Price;

			// price could not be less than 0
			OrderModel.Price = OrderModel.Price < 0 ? 0 : OrderModel.Price;
		}
	}


	// could be 10% or 10 (means -10 grn)
	public void UsePromocode(MouseEventArgs args, string? promocodeValue)
	{
		if (promocodeValue is null)
		{
			return;
		}

		string trimmed = promocodeValue.Trim();
		decimal value = 0;
		if (trimmed.EndsWith('%'))
		{
			bool result = decimal.TryParse(promocodeValue[..^1], out value);
			if (result)
			{
				var howmuch = value * OrderModel.Price / 100;
				OrderModel.Price -= howmuch;
			}
		}
		else
		{

			bool result = decimal.TryParse(promocodeValue, out value);
			if (result && OrderModel.Price > value)
			{
				OrderModel.Price -= value;
			}
		}
	}


	private void SeedCandlesOrdered()
	{
		CandlesOrdered.Add(new CandleOrdered
			{
				Id = 1,
				Name = "first",
				Price = 100,
				Quantity = 0,
				//TotalSum = 0,
				WaxNeededGramm = 10,
				WickDiameterCM = 10
			});

		CandlesOrdered.Add(new CandleOrdered
			{
				Id = 2,
				Name = "second",
				Price = 200,
				Quantity = 0,
				//TotalSum = 0,
				WaxNeededGramm = 20,
				WickDiameterCM = 20
			});

		CandlesOrdered.Add(new CandleOrdered
			{
				Id = 3,
				Name = "third candle big",
				Price = 300,
				Quantity = 0,
				//TotalSum = 0,
				WaxNeededGramm = 30,
				WickDiameterCM = 30
			});

		CandlesOrdered.Add(new CandleOrdered
			{
				Id = 4,
				Name = "mega long name fourth canlde",
				Price = 400,
				Quantity = 0,
				//TotalSum = 0,
				WaxNeededGramm = 40,
				WickDiameterCM = 40
			});
	}

}


