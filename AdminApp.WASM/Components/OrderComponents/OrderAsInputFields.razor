@using AdminApp.WASM.Models;


<h3>
	@if (OrderModel.Id != 0)
	{
		<span>Замовлення -</span> @OrderModel.Id
	}
</h3>

<div>
	<label>
		Дата замовлення
		<InputDate @bind-Value="OrderModel.DateOrdered" @bind-Value:format="dd/MM/yyyy"/>
	</label>
</div>
<div>
	<label>
		ПІБ отримувача
		<InputText @bind-Value="OrderModel.Name" />
	</label>
	<ValidationMessage For="() => OrderModel.Name" />
</div>

<div>
	<label>
		Номер телефону
		<InputText @bind-Value="OrderModel.PhoneNumber" />
	</label>
	<ValidationMessage For="() => OrderModel.PhoneNumber" />
</div>

<div>
	<label>
		Місто
		<InputText @bind-Value="OrderModel.City" />
	</label>
	<ValidationMessage For="() => OrderModel.City" />
</div>

<div>
	<label>
		Адреса доставки
		<InputText @bind-Value="OrderModel.Adress" />
	</label>
	<ValidationMessage For="() => OrderModel.Adress" />
</div>

<div>
	<label>
		Коментар
		<InputText @bind-Value="OrderModel.Comment" />
	</label>
</div>


<div>
	<label @onclick="() => CandlesExpanded = !CandlesExpanded" @onclick:preventDefault>
		Свічка
	</label>
	<button type="button" @onclick="() => CandlesExpanded = !CandlesExpanded">click</button>

	@if (CandlesExpanded)
	{
		<br />
		@foreach (var candle in CandlesOrdered)
		{
			<span>@candle.Name =</span>
			<button type="button" @onclick="(e) => DecreaseCounterForChosenCandle(e, candle)">- </button>
			<span>@candle.Quantity</span>
			<button type="button" @onclick="(e) => IncreaseCounterForChosenCandle(e, candle)">+</button>
			<span>@candle.TotalSum</span>
			<br />
		}
	}
</div>


<div>
	<label>
		Промокод (% або знижка грн)
		<InputText @bind-Value="OrderModel.Promocode" @onclick="() => CandlesExpanded = false" />
		<button type="button" @onclick="(args) => UsePromocode(args, OrderModel.Promocode)">Use</button>
	</label>
</div>

<div>
	Вибрані свічки:
	@{ int totalgram = 0;
		@foreach (var candle in CandlesOrdered)
		{
			@if (candle.Quantity > 0)
			{
				<br/><span>@candle.Name - @candle.Quantity шт - @(candle.WaxNeededGramm*candle.Quantity) г</span>
				totalgram += candle.WaxNeededGramm * candle.Quantity;
			}
		}
		<br><span>Воску потрібно: </span>@totalgram<span> г.</span>
	}
</div>

<div>
	<label>
		Сума
		<InputNumber @bind-Value="OrderModel.Price" @onclick="() => CandlesExpanded = false" />
	</label>
	<ValidationMessage For="() => OrderModel.Price" />
</div>


@code {

	// ordermodel from form models
	[Parameter]
	public NewOrderFormModel OrderModel { get; set; } = null!;

	// needed to display them when adding new candle to order
	[Parameter]
	public IEnumerable<CandleFullVM> Candles { get; set; } = null!;

	// get all chosen candles with quantity > 0
	[Parameter]
	public List<CandleOrdered> CandlesOrdered { get; set; } = new List<CandleOrdered>();


	// expand/hide candles to add them
	private bool CandlesExpanded { get; set; } = false;


	// called after received parameters from parent
	protected override void OnParametersSet()
	{
		// assigning each candle to CandlesOrdered model with default Quantity and Totalsum
		foreach (var candle in Candles)
		{
			CandlesOrdered.Add(new CandleOrdered
				{
					Id = candle.Id,
					Name = candle.Name,
					Price = candle.SellPrice,
					Quantity = 0,
					TotalSum = 0,
					WaxNeededGramm = candle.WaxNeededGram,
					WickDiameterCM = candle.WickDiameterCM
				});
		}


		// key - candleId
		// value - quantity of candle
		foreach (var c in OrderModel.CandleIdAndQuantity)
		{
			var index = CandlesOrdered.FindIndex(o => o.Id == c.Key);
			CandlesOrdered[index].Quantity = c.Value;
			CandlesOrdered[index].TotalSum = CandlesOrdered[index].Quantity * CandlesOrdered[index].Price;
		}
	}


	// functions for increasing/decreasing counter
	public void IncreaseCounterForChosenCandle(MouseEventArgs args, CandleOrdered candle)
	{
		candle.Quantity++;
		candle.TotalSum += candle.Price;
		OrderModel.Price += candle.Price;
	}
	public void DecreaseCounterForChosenCandle(MouseEventArgs args, CandleOrdered candle)
	{
		if (candle.Quantity > 0 && candle.TotalSum >= candle.Price)
		{
			candle.Quantity--;
			candle.TotalSum -= candle.Price;
			OrderModel.Price -= candle.Price;

			// price could not be less than 0
			OrderModel.Price = OrderModel.Price < 0 ? 0 : OrderModel.Price;
		}
	}


	// could be 10% or 10 (means -10 grn)
	public void UsePromocode(MouseEventArgs args, string? promocodeValue)
	{
		if (promocodeValue is null)
		{
			return;
		}

		string trimmed = promocodeValue.Trim();
		decimal value = 0;
		if (trimmed.EndsWith('%'))
		{
			bool result = decimal.TryParse(promocodeValue[..^1], out value);
			if (result)
			{
				var howmuch = value * OrderModel.Price / 100;
				OrderModel.Price -= howmuch;
			}
		}
		else
		{

			bool result = decimal.TryParse(promocodeValue, out value);
			if (result && OrderModel.Price > value)
			{
				OrderModel.Price -= value;
			}
		}
	}

}


