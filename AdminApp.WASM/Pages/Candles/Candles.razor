@page "/candle"
@using AdminApp.WASM.Models
@layout CandlesLayout;
@inject HttpClient client;
@inject CandleHandlerService candleHandler;
@inject INavigation navigationService
@inject IConfiguration config

<PageTitle>Свічки</PageTitle>

<span></span>
<div class="container pb-5">

	<div class="container">
		<a href="/candle/new-candle" class="add-candle btn">
			<span class="bi bi-patch-plus" aria-hidden="true"></span> Додати свічку
		</a>
	</div>

	<!-- placeholder time -->
	@if (CandlesExpanded is null)
	{
		<div class="container">

			<AdminApp.WASM.Components.Placeholders.CandleItemListPlaceholder />
			<AdminApp.WASM.Components.Placeholders.CandleItemListPlaceholder />
			<AdminApp.WASM.Components.Placeholders.CandleItemListPlaceholder />
			<AdminApp.WASM.Components.Placeholders.CandleItemListPlaceholder />
			<AdminApp.WASM.Components.Placeholders.CandleItemListPlaceholder />

		</div>
	}

	// no candles at all
	else if (!CandlesExpanded.Any())
	{
		<p> @MessageResponse </p>
	}

	// actual candles list
	else
	{

		<div class="container">
			@foreach (var candle in CandlesExpanded.OrderBy(c => c.CandleItem.Name))
			{
				<div class="row row-cols-3 row-cols-lg-4 border border-dark my-2 py-1 candle-item montserat">
					
					
					<!-- Candle Image -->
					<div class="col-3 col-lg-1 my-auto">
						<img src="@candle.ImgSrc" alt="" class="rounded img-candleslist" /> @* direct image source link from api *@
					</div>


					<!-- Clickable area will open edit candle -->
					<div class="col-8 col-lg-6" @onclick="() => EditCandle(candle.CandleItem.Id)">
						<div class="row">
							<div class="col">
								<span class="fw-bolder" style="color: #FCFFF3">
									@candle.CandleItem.Name
								</span>
							</div>
						</div>

						<div class="row">
							<div class="col">
								<span class="small play">Ціна - @candle.CandleItem.SellPrice.ToZeroNumbersAfterComma() грн.</span>
							</div>

							<div class="col desktop-display">
								<span class="small">Собівартість - @candle.CandleItem.RealCost.ToZeroNumbersAfterComma() грн.</span>
							</div>

						</div>


						<div class="row">

							<div class="col">
								<span class="small">Віск - @candle.CandleItem.WaxNeededGram г.</span>
							</div>

							<div class="col">
								<span class="small">Гніт - @candle.CandleItem.WickDiameterCM нит.</span>
							</div>
						</div>

					</div>

					<!-- only display in large screens. Additional info about candle -->
					<div class="col-lg-4 desktop-display">
						<div class="row">
							<div class="col">
								<span class="small">Категорія - @candle.CandleItem.Category</span>
							</div>
						</div>

						<div class="row">
							<div class="col">
								<span class="small">Час горіння - @candle.CandleItem.BurningTimeMins хв.</span>
							</div>
						</div>

						<div class="row">
							<div class="col">
								<span class="small">Висота - @candle.CandleItem.HeightCM см.</span>
							</div>
						</div>

					</div>

					<div class="col-1 col-lg-1 my-auto ps-0">
						<a href="/candle/@candle.CandleItem.Id" class="text-light">
							<span class="bi bi-chevron-compact-right"></span>
						</a>
					</div>



				</div>
			}
		</div>
	}


</div>


@code {
	private string path = $"api/Candle?view=full";

	public string MessageResponse { get; set; } = "Loading...";

	// List retrieved from API
	public IEnumerable<CandleFullVM>? CandleList { get; set; }

	// Manipulating list inside this page
	public List<CandleWithExpanded>? CandlesExpanded { get; set; } = null;


	// Cached candles
	private ICollection<CandleWithExpanded>? _candlesCache { get; set; } = null;
	private List<ImageForCandle>? _imgCacheCandles { get; set; } = null;


	protected override async Task OnInitializedAsync()
	{

		CandleList = await candleHandler.GetAllCandlesListAsync(path);

		MessageResponse = CandleList.Any() switch
		{
			true => "",
			_ => "Сталась помилка або свічок немає."
		};

		CandlesExpanded = new List<CandleWithExpanded>();

		if (!CandleList.Any())
		{
			return;
		}


		var basepath = config.GetValue<string>("BaseAdress");

		// adding into CandlesExpanded
		foreach (var c in CandleList)
		{

			var imgsrc = "";
			if (c.PhotoLink is null)
			{
				imgsrc = "img/question_mark.png";
			}
			else
			{
				imgsrc = $"{basepath}api/candle/imgForId={c.Id}";
			}

			CandlesExpanded.Add(new CandleWithExpanded(item: c, expanded: false, imgsrc: imgsrc));

		}


	}

	public void EditCandle(int candleId)
	{
		navigationService.PerformNavigation($"candle/{candleId}");
	}


	public class CandleWithExpanded
	{
		public CandleFullVM CandleItem { get; set; }
		public bool Expanded { get; set; } = false;

		public string ImgSrc { get; set; } = "img/question_mark.png";

		public CandleWithExpanded(CandleFullVM item, bool expanded, string imgsrc)
		{
			CandleItem = item;
			Expanded = expanded;
			ImgSrc = imgsrc;
		}
	}



}
