@page "/candle"
@using AdminApp.WASM.Models
@layout CandlesLayout;
@inject HttpClient client;
@inject CandleHandlerService candleHandler;
@inject INavigation navigationService

<style>
	.candle-item {
		/* #868f74 */
		border: 1px solid grey;
		border-radius: 5px;
		background-color: #5F6451;
		color: #F9FFE7;
	}

	.img-candleslist {
		width: 65px;
		height: 65px;
		/* object-fit: contain; */
	}
</style>

<span></span>
<div class="container pb-5">

	<div class="container">
		<a href="/candle/new-candle" class="add-candle btn">
			<span class="bi bi-patch-plus" aria-hidden="true"></span> Додати свічку
		</a>
	</div>

	<!-- placeholder time -->
	@if(CandlesExpanded is null)
	{
		<div class="container">

			<AdminApp.WASM.Components.Placeholders.CandleItemListPlaceholder />
			<AdminApp.WASM.Components.Placeholders.CandleItemListPlaceholder />
			<AdminApp.WASM.Components.Placeholders.CandleItemListPlaceholder />
			<AdminApp.WASM.Components.Placeholders.CandleItemListPlaceholder />
			<AdminApp.WASM.Components.Placeholders.CandleItemListPlaceholder />

		</div>
	}

	// no candles at all
	else if (!CandlesExpanded.Any())
	{
		<p> @MessageResponse </p>
	}

	// actual candles list
	else
	{
		
		@* <div class="container-fluid">
			<table class="table table-hover align-middle">
				<thead>
					<tr>
						<th scope="col" class="col-2">Id</th>
						<th scope="col" class="col-7">Назва </th>
						<th scope="col" class="col-3"></th>
					</tr>
				</thead>

				<tbody>
					@foreach (var can in CandlesExpanded)
					{
						<tr style="cursor:pointer" @onclick="() => can.Expanded = !can.Expanded">
							<td class="col-2"> @can.CandleItem.Id </td>
							<td class="col-7"> @can.CandleItem.Name </td>
							<td class="col-3">
								<div class="d-grid gap-2">
								<button type="button" class="btn btn-secondary" @onclick="() => EditCandle(can.CandleItem.Id)">
									<span class="oi oi-pencil" aria-hidden="true"></span>
								</button>
								</div>
							</td>
						</tr>
						@if (can.Expanded)
						{
							<tr id="toexpand">
								<td colspan="3" class="col-12 lighter-back">
									<div class="wrapper">
										<div class="expandable">
											<CascadingValue Value="can.CandleItem">
												<CandleFullInfoAsTable />
											</CascadingValue>
										</div>
									</div>
								</td>
							</tr>
						}
					}
				</tbody>

			</table>
		</div>
 *@

		<div class="container">
		@foreach(var candle in CandlesExpanded.OrderBy(c => c.CandleItem.Name))
		{
			<div class="row border border-dark my-2 py-1 candle-item montserat">
				<div class="col-3 my-auto">
						<img src="@candle.ImgSrc" alt="" class="rounded img-candleslist" />
				</div>


				<!-- Clickable area -->
						<div class="col-8" @onclick="() => EditCandle(candle.CandleItem.Id)">
						<div class="row">
							<div class="col">
								<span class="fw-bolder" style="color: #FCFFF3">
									@candle.CandleItem.Name
								</span>
							</div>
						</div>

						<div class="row">
							<div class="col">

								<span class="small play">Ціна - @candle.CandleItem.SellPrice.ToZeroNumbersAfterComma() грн.</span>

								@* <br/>
								<span class="small">@candle.CandleItem.WaxNeededGram г.</span>
								<span> --- </span>
								<span class="small">@candle.CandleItem.WickDiameterCM ниток</span> *@
							</div>

						</div>


						<div class="row">

							<div class="col">
								<span class="small">Віск - @candle.CandleItem.WaxNeededGram г.</span>
							</div>

							<div class="col">
								<span class="small">Гніт - @candle.CandleItem.WickDiameterCM нит.</span>
							</div>
						</div>

					</div>


				<div class="col-1 my-auto ps-0">
					<a href="/candle/@candle.CandleItem.Id" class="text-light">
						<span class="bi bi-chevron-compact-right"></span>
					</a>
				</div>
	

				
			</div>
		}
		</div>
	}


</div>


@code {
	private string path = $"api/Candle?view=full";

	public string MessageResponse { get; set; } = "Loading...";

	public IEnumerable<CandleFullVM>? CandleList { get; set; }



	// public bool Expanded { get; set; } = false;

	// public string? expandedClass => Expanded ? "open" : null;

	public List<CandleWithExpanded>? CandlesExpanded { get; set; } = null;


	private ICollection<CandleWithExpanded>? _candlesCache { get; set; } = null;
	private List<ImageForCandle>? _imgCacheCandles { get; set; } = null;

	protected override async Task OnInitializedAsync()
	{

		CandleList = await candleHandler.GetAllCandlesListAsync(path);

		MessageResponse = CandleList.Any() switch
		{
			true => "",
			_ => "Сталась помилка або свічок немає."
		};

		CandlesExpanded = new List<CandleWithExpanded>();

		if(!CandleList.Any())
		{
			return;
		}

		//
		//
		//
		// IT WILL NOT WORK BECAUSE THERE IS NO DIRECTORIES IN THE BROWSER AS WE USED TO SEE
		//
		// check if the cache is present
		if (_imgCacheCandles is null)
		{
			_imgCacheCandles = new List<ImageForCandle>();

			foreach (var c in CandleList)
			{
				// download image for c.Id as a string
				var response = await client.GetAsync(@$"api/candle/imgForId={c.Id}");
				var imgstr = await response.Content.ReadAsStringAsync();

				// in case string is null then we use question mark image for local path
				var localpath = "img/question_mark.png";
				if(!string.IsNullOrEmpty(imgstr))
				{
					// create byte array as binary file
					var bytes = Convert.FromBase64String(imgstr);
					// new local path based on c.Id
					localpath = @$"/home/web_user/{c.Id}_{c.Name}.jpeg";
					// create image file in path
					if(!File.Exists(localpath))
					{
						File.Create(localpath);
					}
					await File.WriteAllBytesAsync(localpath, bytes);
				}

				// add each candle image into cache
				_imgCacheCandles.Add(new ImageForCandle(candleId: c.Id, remotelink: c.PhotoLink, localLink: localpath, isActive: true));
			}
		}




		// adding into CandlesExpanded
		foreach (var c in CandleList)
		{
			var response = await client.GetAsync(@$"api/candle/imgForId={c.Id}");
			var imgstr = await response.Content.ReadAsStringAsync();

			var str = string.Format("data:image/jpeg;base64,{0}", imgstr);

			if (string.IsNullOrEmpty(imgstr))
			{
				str = "img/question_mark.png";
			}

			CandlesExpanded.Add(new CandleWithExpanded(item: c, expanded: false, imgsrc: str));


		}

		// if the cache is not null then we need perform caching checks
		// for (int i = 0; i < CandlesExpanded.Count(); i++)
		// {
		// 	if (CandlesExpanded[i].CandleItem.PhotoLink == _imgCacheCandles[i].RemoteLink)
		// 	{
		// 		// nothing needed	
		// 	}
		//}

	}

	public void EditCandle(int candleId)
	{
		navigationService.PerformNavigation($"candle/{candleId}");
	}

	private void CreateCacheForCandlesList()
	{
		
	}


	public class CandleWithExpanded
	{
		public CandleFullVM CandleItem { get; set; }
		public bool Expanded { get; set; } = false;

		public string ImgSrc { get; set; } = "img/question_mark.png";

		public CandleWithExpanded(CandleFullVM item, bool expanded, string imgsrc)
		{
			CandleItem = item;
			Expanded = expanded;
			ImgSrc = imgsrc;
		}
	}


	
}
