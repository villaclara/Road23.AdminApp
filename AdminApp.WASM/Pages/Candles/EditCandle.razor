@page "/candle/{id:int}"
@layout CandlesLayout;
@using AdminApp.WASM.Application.Utility;
@using AdminApp.WASM.Models.FormModels;
@using AdminApp.WASM.Models.ViewModels;
@using AdminApp.WASM.Components.Misc;
@inject NavigationManager navManager;
@inject HttpClient client;
@inject CandleHandlerService candleService;
@inject CategoryHandlerService categoryService;
@inject IImageUploader imageUploadService;
@inject INavigation navigationService
@inject IConfiguration config


<style>
	.lightgreencolor {
		background-color: lightgrey;
	}
</style>


@if (_selectedCandle == default)
{
	<div class="container">
		<p>Немає свічки з таким id.</p>
	</div>
}
else if (_selectedCandle.Id == 0)
{
	<div class="container text-center pb-2" aria-hidden="true">
		<div class="placeholder placeholder-wave lightgreencolor col-6" style="height: 40px">
		</div>
	</div>

	<div class="container" aria-hidden="true">
		<div class="container">
			<div class="pb-2 row">
				<label class="form-label col-3 col-lg-2 col-form-label fs-5 fw-lighter">
					Назва
				</label>
				<div class="placeholder placeholder-wave col-9 lightgreencolor">
				</div>
			</div>
			<div class="pb-2 row">
				<label class="form-label col-3 col-lg-2 col-form-label fs-5 fw-lighter">
					Опис
				</label>
				<div class="placeholder placeholder-wave col-9 lightgreencolor">
				</div>
			</div>
			<div class="pb-2 row">
				<label class="form-label col-4 col-lg-2 col-form-label fs-5 fw-lighter">
					Категорія
				</label>
				<div class="placeholder placeholder-wave col-8 lightgreencolor">
				</div>
			</div>
			<div class="pb-2 row">
				<label class="form-label col-3 col-lg-2 col-form-label fs-5 fw-lighter">
					Фото
				</label>
				<div class="placeholder placeholder-wave col-9 lightgreencolor">
				</div>
			</div>


			<hr class="hr-line" />

			<div class="pb-2 row">
				<label class="form-label col-5 col-lg-2 col-form-label pe-0 fw-lighter">
					Собівартість
				</label>
				<div class="placeholder placeholder-wave col-3 lightgreencolor">
				</div>
			</div>
			<div class="pb-2 row">
				<label class="form-label col-5 col-lg-2 col-form-label pe-0 fw-lighter">
					Ціна продажу
				</label>
				<div class="placeholder placeholder-wave col-3 lightgreencolor">
				</div>
			</div>

			<hr class="hr-line" />

			<div class="pb-2 row">
				<label class="form-label col-5 col-lg-2 col-form-label pe-0 fw-lighter">
					Час горіння
				</label>
				<div class="placeholder placeholder-wave col-3 lightgreencolor">
				</div>
			</div>
			<div class="pb-2 row">
				<label class="form-label col-5 col-lg-2 col-form-label pe-0 fw-lighter">
					Висота
				</label>
				<div class="placeholder placeholder-wave col-3 lightgreencolor">
				</div>
			</div>
			<div class="pb-2 row">
				<label class="form-label col-5 col-lg-2 col-form-label pe-0 fw-lighter">
					Гніт діаметр
				</label>
				<div class="placeholder placeholder-wave col-3 lightgreencolor">
				</div>
			</div>
			<div class="pb-2 row">
				<label class="form-label col-5 col-lg-2 col-form-label pe-0 fw-lighter">
					Воску потрібно
				</label>
				<div class="placeholder placeholder-wave col-3 lightgreencolor">
				</div>
			</div>
			<div class="p-2 row">

				<a href="#" tabindex="-1" class="btn btn-success disabled placeholder col-4" aria-hidden="true"></a>
			</div>

		</div>
	</div>
}
else
{
	<div class="container">

		<div class="row">
			<div class="col-8">

				<div class="row">
					<div class="col ps-0">
						<AdminApp.WASM.Components.NavigationComponents.ReturnBackButtonComponent FromPageReached="candle" Text="Назад" />
					</div>
				</div>

				<div class="row py-2 pe-0">
					<div class="col pe-0">
						<span class="display-6 comfortaa fw-bolder">@NewCandleForm.Name</span>

					</div>
				</div>

				<div class="row">
					<div class="col montserat">
						<InputFile class="form-control form-control-sm" OnChange="LoadPhotoToVariable" id="inputfile" />
						@* <label for="inputfile">labelforinput</label> *@
					</div>
				</div>
			</div>
			<div class="col-4 my-auto rounded border border-dark px-1 py-1 shadow bg-body-tertiary" style="height: 95px; width: 95px;">
				<img src="@IMG" alt="" class="@SetCssImageIfIsLoaded(IMG) rounded" height="85" width="85" />
			</div>
		</div>

	</div>

	<div class="container">

		<EditForm Model="NewCandleForm" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" @onsubmit:preventDefault>
			<DataAnnotationsValidator />
			<CascadingValue Value="NewCandleForm">
				<CandleAsInputFields Categories="CatNames" @bind-NewCategoryToAdd="@PossibleNewCategoryName" />
			</CascadingValue>


			<p> @MessageResponse </p>


			<div class="container-fluid d-grid d-md-block">
				@* <button class="btn btn-lg btn-success rounded-1">Зберегти</button> *@

				<ButtonWithSpinnerAction ButtonCss="btn btn-lg btn-success rounded-1" ButtonText="Зберегти" IsButtonPressed=@IsEditButtonPressed />

			</div>
		</EditForm>

	</div>
	<hr />
	<hr />
	<div class="container">
		@* <ButtonWithSpinnerAction ButtonCss="btn btn-danger btn-sm" ButtonText="Видалити" IsButtonPressed="@IsDeleteButtonPressed" @onclick="(() => DeleteCandle())"/> *@
		<button type="button" class="btn btn-danger btn-sm" @onclick="(() => DeleteCandle())">
			<span>Видалити</span>
		</button>

	</div>

}


@code {

	// candle Parameters stuff
	[Parameter]
	public int Id { get; set; }

	// Form model
	public NewCandleFormModel NewCandleForm { get; set; } = new();

	// Selected candle from DB with Id as [Parameter]
	private CandleFullVM? _selectedCandle = new CandleFullVM() { Id = 0 };

	// MessageResponse displayed 
	public string MessageResponse { get; set; } = "";

	// Categories to be able to select
	public IEnumerable<CategoryVM> Categories { get; set; } = new List<CategoryVM>(10);
	public List<string> CatNames { get; set; } = new List<string>();

	// Possible new category
	public string PossibleNewCategoryName { get; set; } = string.Empty;


	// Button states to pass into ButtonWithSpinnerAction Component to display spinner when processed
	public bool IsEditButtonPressed { get; set; } = false;
	public bool IsDeleteButtonPressed { get; set; } = false;


	// Image processing stuff
	private string SetCssImageIfIsLoaded(string img) => string.IsNullOrEmpty(img) ? "hide" : "show";

	// Image in base64 string 
	public string IMG { get; set; } = "";

	// File uploaded from user
	private IBrowserFile? _browserFile;

	// Initialization phase
	protected override async Task OnInitializedAsync()
	{
		_selectedCandle = await candleService.GetCanldeAsync($"api/candle/cid={Id}?view=full");
		NewCandleForm = _selectedCandle?.ConvertToFormModel_FromFullVM() ?? new NewCandleFormModel();

		// image for candle
		var basepath = config.GetValue<string>("BaseAdress");
		if(_selectedCandle.PhotoLink is null)
		{
			IMG = "img/question_mark.png";
		}
		else
		{
			IMG = $"{basepath}api/candle/imgForId={_selectedCandle.Id}";
		}


		MessageResponse = "";

		// Display categories in Select
		Categories = await categoryService.GetCategoryListAsync("api/candlecategory");
		CatNames = Categories.Select(c => c.Name).ToList();
		CatNames.Add(Constants.NEW_CATEGORY_TO_ADD_OPTION);
	}

	private async Task LoadPhotoToVariable(InputFileChangeEventArgs e)
	{
		// retrieving the file uploaded
		_browserFile = e.File;

		using MemoryStream ms = new();
		await _browserFile.OpenReadStream(_browserFile.Size).CopyToAsync(ms);

		// converting image to byte array
		byte[] imgBuffer = ms.ToArray();

		// convetring to base64 to display
		var temp = Convert.ToBase64String(imgBuffer);
		IMG = string.Format($"data:image/jpeg;base64,{temp}");
	}

	// When submit form with valid values
	public async Task HandleValidSubmit()
	{
		IsEditButtonPressed = true;

		// checking if the possible new category has any value
		if (NewCandleForm.Category == Constants.NEW_CATEGORY_TO_ADD_OPTION && !string.IsNullOrEmpty(PossibleNewCategoryName))
		{
			NewCandleForm.Category = PossibleNewCategoryName;
		}

		// Setting new values to candle
		_selectedCandle!.Name = NewCandleForm.Name;
		_selectedCandle.Description = NewCandleForm.Description;
		_selectedCandle.Category = NewCandleForm.Category;
		_selectedCandle.PhotoLink = NewCandleForm.PhotoLink;
		_selectedCandle.RealCost = NewCandleForm.RealCost ?? _selectedCandle.RealCost;
		_selectedCandle.SellPrice = NewCandleForm.SellPrice ?? _selectedCandle.SellPrice;
		_selectedCandle.HeightCM = NewCandleForm.HeightCM ?? _selectedCandle.HeightCM;
		_selectedCandle.BurningTimeMins = NewCandleForm.BurningTimeMins ?? _selectedCandle.BurningTimeMins;
		_selectedCandle.WickDiameterCM = NewCandleForm.WickDiameterCM ?? _selectedCandle.WickDiameterCM;
		_selectedCandle.WaxNeededGram = NewCandleForm.WaxNeededGram ?? _selectedCandle.WaxNeededGram;
		// assigning value of Id, because otherwise _selectedCandle.Id = 0
		_selectedCandle.Id = Id;

		var result = await candleService.UpdateCandleAsync($"api/candle/cid={Id}", _selectedCandle);
		if (!result)
		{
			MessageResponse = "Не вдалось оновити свічку";
			return;
		}

		// get candle item to retrieve the ID for photo
		var candle = await candleService.GetCanldeAsync($"api/candle/cname={_selectedCandle.Name}?view=full");
		if (candle is null)
		{
			MessageResponse = "Свічка оновлена, але не отримана інфа для нового фото.";
			return;
		}

		// try to upload image to candle
		var id = candle.Id;
		var r = await imageUploadService.UploadImageToCandleByIdAsync(id, _browserFile);

		// MessageResponse = r switch
		// {
		// 	true => "Свічка успішно оновлена.",
		// 	false => "Свічка оновлена, але фото не вдалось додати."
		// };

		IsEditButtonPressed = false;

		if (r)
		{
			MessageResponse = "Свічка успішно оновлена.";

			// await Task.Delay(2000);
			// navManager.NavigateTo("/candle");

			navigationService.PerformNavigationWithDelayAsync("/candle");
		}
		else
		{
			MessageResponse = "Свічка оновлена, але фото не вдалось додати.";
		}
	}

	public void HandleInvalidSubmit()
	{
		MessageResponse = "Невірно введені дані.";
	}

	public async Task DeleteCandle()
	{
		IsDeleteButtonPressed = true;

		var result = await candleService.DeleteCandleAsync($"api/candle/cid={Id}");
		if (result)
		{
			MessageResponse = "Свічка видалена.";
			NewCandleForm = new();

			navigationService.PerformNavigationWithDelayAsync("/candle");
		}
		else
		{
			MessageResponse = "Помилка при видаленні свічки";
		}

		IsDeleteButtonPressed = false;
	}

	private async Task PerformNavigation(string where)
	{
		await Task.Delay(1000);
		navigationService.PerformNavigationWithDelayAsync(where);
	}
}
