@page "/order/{Id:int}"
@using AdminApp.WASM.Models;
@using AdminApp.WASM.Components.Misc;
@inject OrderHandlerService orderHandler;
@inject CandleHandlerService candleHandler;

<style>
	.lightpinkcolor {
		background-color: lightgrey;
	}
</style>

<AdminApp.WASM.Components.NavigationComponents.ReturnBackButtonComponent FromPageReached="order" ButtonClass="btn-outline-dark" Text="Всі замовлення" />

@if (_orderVM == default)
{
	<div class="container">
		<p>Немає замовлення з таким id.</p>
	</div>
}
else if (_orderVM.Id == 0)
{
	<div class="container" aria-hidden="true">
		<div class="container">
			<div class="pb-2 row text-center">
				<label class="form-label col-8 col-lg-2 col-form-label fs-5 fw-lighter">
					Замовлення -
				</label>
				<div class="placeholder placeholder-wave col-2">
				</div>
			</div>


			<div class="pb-2 row">
				<label class="form-label col-6 col-lg-2 col-form-label fw-lighter">
					Дата замовлення
				</label>
				<div class="placeholder placeholder-wave col-6 col-lg-2">
				</div>
			</div>


			<!-- PIB and Phone number are grouped into one row in big screens, two rows on phone screen -->
			<div class="row row-cols-lg-4 gy-2 pb-2">
				<label class="form-label col-2 col-lg-1 col-form-label fw-lighter">
					ПІБ
				</label>
				<div class="placeholder placeholder-wave col-10 col-lg-4 ">
				</div>

				<label class="form-label col-6 col-lg-2 col-form-label fw-lighter">
					Номер телефону
				</label>
				<div class="placeholder placeholder-wave col-6 col-lg-2 ">
				</div>
			</div>

			<!-- City and Delivery adress are grouped into one row in big screens, two rows on phone screen -->
			<div class="row row-cols-lg-4 gy-2 pb-2">
				<label class="form-label col-3 col-lg-1 col-form-label fw-lighter">
					Місто
				</label>
				<div class="placeholder placeholder-wave col-9 col-lg-4 ">
				</div>
				<label class="form-label col-6 col-lg-2 col-form-label fw-lighter">
					Адреса доставки
				</label>
				<div class="placeholder placeholder-wave col-6 col-lg-5 ">
				</div>
			</div>

			<div class="pb-2 row">
				<label class="form-label col-3 col-lg-2 col-form-label fw-lighter">
					Коментар
				</label>
				<div class="placeholder placeholder-wave col-9 col-lg-6 ">
				</div>
			</div>

			<hr class="hr-line" />

			<div class="row">
				<label class="text-center form-label col-5 col-lg-2 col-form-label fw-lighter">
					Свічки:
				</label>


				<a href="#" tabindex="-1" class="btn btn-success disabled placeholder col-4" aria-hidden="true"></a>

			</div>


			<hr class="hr-line" />

			<div class="pb-2 row">
				<div class="input-group">
					<label class="input-group-text col-8 col-lg-3  fw-lighter">
						Промокод
						<small style="font-size: 11px;"> &nbsp;(% або знижка в грн)</small>
					</label>
					<div class="placeholder placeholder-wave col-2 col-lg-2 ">
					</div>
					<div class="col-2 ps-0">
						<button class="btn btn-outline-secondary" type="button">use</button>
					</div>
				</div>
			</div>


			<hr />

			<div class="pb-1 row me-1">
				<label class="form-label col-6 col-lg-2 col-form-label fw-lighter text-end">
					Воску потрібно:
				</label>
				<div class="placeholder placeholder-wave col-5 col-lg-2 ">
				</div>
				<label class="col-1 col-lg-1 ps-0 my-auto"><span>&nbsp;г.</span></label>
			</div>

			<div class="pb-2 row me-1">
				<label class="form-label col-6 col-lg-2 col-form-label fw-lighter text-end">
					Сума
				</label>
				<div class="placeholder placeholder-wave col-5 col-lg-2 ">
				</div>
				<div class="col-1 col-lg-1 ps-0 my-auto">грн.</div>
			</div>

			<div class="container d-grid d-md-block p-3">

				<a href="#" tabindex="-1" class="btn btn-success disabled placeholder" aria-hidden="true"></a>
			</div>

		</div>
	</div>

}
else
{
	<p></p>
	<div class="container text-center">
		<h3>
			Замовлення - @OrderModel.Id
		</h3>
	</div>

	<EditForm Model="OrderModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
		<DataAnnotationsValidator />
		<OrderAsInputFields OrderModel="OrderModel" Candles="Candles" CandlesOrdered="CandlesOrdered" />

		<div class="container d-grid d-md-block p-3">
			<button class="btn btn-success">Зберегти зміни</button>
		</div>
	</EditForm>


	<hr />
	<hr />

	<div class="container">
		<button type="button" class="btn btn-danger btn-sm" @onclick="() => DeleteOrderById(Id)">Видалити замовлення</button>
	</div>



}
@code {

	[Parameter]
	public int Id { get; set; }

	public string MessageResponse { get; set; } = "adsada";

	// new fixes the rendering error because in OnInitializedAsync it is later initialized, not at the start of rendering page
	public NewOrderFormModel OrderModel { get; set; } = new NewOrderFormModel();

	// needed to display them when adding new candle to order
	public IEnumerable<CandleFullVM> Candles { get; set; } = new List<CandleFullVM>();

	// get all chosen candles with quantity > 0
	public List<CandleOrdered> CandlesOrdered { get; set; } = new List<CandleOrdered>();


	// expand/hide candles to add them
	private bool CandlesExpanded { get; set; } = false;


	private OrderVM? _orderVM = new OrderVM() { Id = 0 };


	protected override async Task OnInitializedAsync()
	{
		_orderVM = await orderHandler.GetOrderAsync($"api/order/oid={Id}");
		OrderModel = _orderVM?.ConvertToOrderModel_FromFullVM() ?? new NewOrderFormModel();

		Candles = await candleHandler.GetAllCandlesListAsync("api/candle?view=full");


	}


	public async Task DeleteOrderById(int orderId)
	{
		var result = await orderHandler.DeleteOrderAsync($"api/order/oid={orderId}");
		MessageResponse = result switch
		{
			true => "Замовлення видалено.",
			false => "Помилка при видаленні замовлення. Спробуйте ще раз.",
		};
	}



	public async Task HandleValidSubmit()
	{
		// clear all instances of added candles
		OrderModel.CandleIdAndQuantity.Clear();

		// converting all ordered candles which has quantity more than 0 to the dictionary of OrderModel
		foreach (var candle in CandlesOrdered)
		{
			if (candle.Quantity > 0)
			{
				OrderModel.CandleIdAndQuantity.Add(candle.Id, candle.Quantity);
			}
		}

		var orderToUpd = OrderModel.ConvertToFullVM_FromFormModel();
		orderToUpd.Id = Id;

		/* validation here */


		// submitting to api
		var result = await orderHandler.UpdateOrderAsync($"api/order/oid={Id}", orderToUpd);

		if (result)
		{
			MessageResponse = "Замовлення збережено.";
			OrderModel = new();
		}
		else
		{
			MessageResponse = "Помилка при збереженні замовлення. Спробуйте ще раз.";
		}
	}

	public void HandleInvalidSubmit()
	{
		MessageResponse = "Некоректно введені дані.";
	}
}



