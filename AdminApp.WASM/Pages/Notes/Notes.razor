@page "/note/overview"
@inject NoteHandlerService noteHandler;
@inject NavigationManager navManager;

<style>
	.btn:focus {
		box-shadow: none;
		outline: none;
	}

	.transition-visible {

		overflow: hidden;
		transition: transform 0.3s ease-out;
		height: auto;
		transform: scaleY(1);
		transform-origin: top;
	}

		.transition-visible.transition-collapsed {
			transform: scaleY(0);

		}
</style>


<hr />

<!-- FIRST SECTION WITH SINGLE DATE -->

<div class="container">
	<div class="row">
		<div class="d-grid">
			<a class="text-start btn border border-dark" @onclick="(e) => ChangeSectionOpened(e, true)">
				@if (FirstSectionOpened)
				{
					<span class="bi bi-chevron-down"></span>
				}
				else
				{
					<span class="bi bi-chevron-right"></span>
				}
				Дата
			</a>
		</div>
	</div>
</div>


<div class="transition-visible @_dropdownCssClass" id="collapse">


	<div class="container">

		<div class="row pt-2" style="margin: auto">
			<div class="d-grid mx-auto col-auto">
				<InputDate @bind-Value=ActiveDate class="form-control" />
			</div>
		</div>

		@foreach (var note in AllNotes.OrderBy(n => n.IsDone))
		{
			@if (note.NoteDate == DateOnly.FromDateTime(ActiveDate))
			{
				<div class="row m-auto">
					<div class="col">
						<SingleNote Note="note" />
					</div>

				</div>
			}
		}

		<!-- ADD NEW NOTE SECTION -->

		<div class="row m-auto pt-2">
			<div class="col-1 ps-0">
				<button class="btn shadow-none" type="button" @onclick="() => _newNoteWantToAdd = !_newNoteWantToAdd">
					<i class="bi bi-plus-circle h3"></i>
				</button>
			</div>

			@if (_newNoteWantToAdd)
			{
				<div class="col">
					<EditForm Model="NewNoteFormModel" OnSubmit="AddNewNote">
						<div class="row m-auto">
							<div class="col-11 mx-0 p-0">
								<InputText @bind-Value="NewNoteFormModel.NoteText" class="form-control" />
							</div>
							<div class="col-1 ps-0">
								<button class="btn shadow-none" type="submit">
									<i class="oi oi-check"></i>
								</button>
							</div>
						</div>
					</EditForm>
				</div>
			}
		</div>
		<p>@MessageResponse</p>

		<!-- END OF ADD NEW NOTE -->
	</div>
</div>
<!-- END OF FIRST SECTION WITH SINGLE DATE -->

<hr />


<!-- SECTION WITH ALL DATES NOTES LIST -->
<div class="container">
	<div class="row">
		<div class="d-grid">
			<button class="text-start btn border border-dark" @onclick="(e) => ChangeSectionOpened(e, false)">
				@if (SecondSectionOpened)
				{
					<span class="bi bi-chevron-down"></span>
				}
				else
				{
					<span class="bi bi-chevron-right"></span>
				}
				Всі записи
			</button>
		</div>
	</div>
</div>

<div class="transition-visible @_2dropdownCssClass" id="collapse2">

	<div class="container">
		<div class="row" style="margin: auto">
			<div class="col">

				<!-- if the All Notes were loaded then we are ready to go through notes -->
				@if (_allowedToDoForLoop)
				{
					@for (DateOnly d = DateOnly.FromDateTime(DateTime.Now); d <= _maxDate; d = d.AddDays(1))
					{
						@if (AllNotes.Any(n => n.NoteDate == d))
						{
							<div class="row pt-2">
								<div class="col fw-bold bg-body bg-opacity-10">
									@d.ToLongDateString()
								</div>
							</div>

							foreach (var note in AllNotes.Where(n => n.NoteDate == d))
							{
								<div class="row">
									<div class="col">
										<SingleNote Note="note" />
									</div>
								</div>
							}
						}
					}
				}
			</div>
		</div>
	</div>
</div>

<!-- END OF ALL DATES NOTES SECTION -->
@code {
	public ICollection<NoteVM> AllNotes { get; set; } = new List<NoteVM>();

	private string _url = "api/note";

	public DateTime ActiveDate { get; set; } = DateTime.Now;

	private DateOnly _maxDate = DateOnly.FromDateTime(DateTime.Now.AddYears(1));

	private bool _allowedToDoForLoop = false;

	private bool _newNoteWantToAdd = false;
	// sections to be expanded
	// first - With main calendar and chosen date
	// second - all notes
	public bool FirstSectionOpened { get; set; } = true;
	public bool SecondSectionOpened { get; set; } = false;

	public NewNoteFormModel NewNoteFormModel { get; set; } = new();

	public string MessageResponse { get; set; } = "";



	private string _dropdownCssClass => FirstSectionOpened ? "show" : "transition-collapsed";
	private string _2dropdownCssClass => SecondSectionOpened ? "show" : "transition-collapsed";

	protected override async Task OnInitializedAsync()
	{
		AllNotes = await noteHandler.GetAllNotes(_url);
		_maxDate = GetMaxDateFromNotes(AllNotes);
		_allowedToDoForLoop = true;
	}




	public DateOnly GetMaxDateFromNotes(ICollection<NoteVM> notes)
	{
		if (notes.Any())
		{
			List<DateOnly> dates = notes.Select(x => x.NoteDate).ToList();
			return dates.Max();
		}

		return DateOnly.FromDateTime(DateTime.Now.AddYears(1));
	}


	// to display single day or all notes depending on what button pressed
	private void ChangeSectionOpened(MouseEventArgs args, bool first)
	{
		// called at first section
		if (first)
		{
			FirstSectionOpened = !FirstSectionOpened;
			if (SecondSectionOpened)
			{
				SecondSectionOpened = !SecondSectionOpened;
			}
		}

		// called at second section
		else
		{
			SecondSectionOpened = !SecondSectionOpened;
			if (FirstSectionOpened)
			{
				FirstSectionOpened = !FirstSectionOpened;
			}
		}
	}


	//
	public async Task AddNewNote()
	{
		if (string.IsNullOrEmpty(NewNoteFormModel.NoteText))
		{
			MessageResponse = "Запис пустий";
			return;
		}

		var note = new NoteVM()
			{
				IsDone = false,
				NoteDate = DateOnly.FromDateTime(ActiveDate),
				NoteText = NewNoteFormModel.NoteText
			};

		var result = await noteHandler.AddNewNote("api/note", note);
		if (result)
		{
			// hide newnote input field + MessageResponse clear + formModel clear + update notes list
			_newNoteWantToAdd = false;
			MessageResponse = "";
			NewNoteFormModel = new();
			AllNotes = await noteHandler.GetAllNotes(_url);
		}
	}
}
