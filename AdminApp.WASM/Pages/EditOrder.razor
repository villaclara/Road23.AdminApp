@page "/order/{Id:int}"
@using AdminApp.WASM.Models;
@inject OrderHandlerService orderHandler;
@inject CandleHandlerService candleHandler;


<h3>EditOrder</h3>


<h3> Order Tepmlate </h3>

<div>
	<label>
		ПІБ отримувача
		<InputText @bind-Value="OrderModel.Name" />
	</label>
	@* <ValidationMessage For="() => OrderModel.Name" /> *@
</div>

<div>
	<label>
		Номер телефону
		<InputText @bind-Value="OrderModel.PhoneNumber" />
	</label>
@* 	<ValidationMessage For="() => OrderModel.PhoneNumber" />
 *@</div>

<div>
	<label>
		Місто
		<InputText @bind-Value="OrderModel.City" />
	</label>
@* 	<ValidationMessage For="() => OrderModel.City" />
 *@</div>

<div>
	<label>
		Адреса доставки
		<InputText @bind-Value="OrderModel.Adress" />
	</label>
@* 	<ValidationMessage For="() => OrderModel.Adress" />
 *@</div>

<div>
	<label>
		Коментар
		<InputText @bind-Value="OrderModel.Comment" />
	</label>
</div>


<div>
	<label @onclick="() => CandlesExpanded = !CandlesExpanded" @onclick:preventDefault>
		Свічка </label>
	<button type="button" @onclick="() => CandlesExpanded = !CandlesExpanded">click</button>
		
		@if(CandlesExpanded)
		{
				<br />
				@foreach(var candle in CandlesOrdered)
				{
				<span>@candle.Name =</span>
				<button type="button" @onclick="(e) => DecreaseCounterFoChosenCandle(e, candle)">- </button>
				<span>@candle.Quantity</span>
				<button type="button" @onclick="(e) => IncreaseCounterForChosenCandle(e, candle)">+</button>
				<span>@candle.TotalSum</span>
				<br />
				}

		}
</div>


<div>
	<label>
		Промокод (% або знижка грн)
		<InputText @bind-Value="OrderModel.Promocode" @onclick="() => CandlesExpanded = false" />
		<button type="button" @onclick="(args) => UsePromocode(args, OrderModel.Promocode)">Use</button>
	</label>
</div>


Вибрані свічки: 
@foreach(var candle in CandlesOrdered)
{
	@if(candle.Quantity > 0)
	{
		<p>@candle.Name - @candle.Quantity шт - @candle.WaxNeededGramm г</p>
	}
}


<div>
	<label>
		Сума
		<InputNumber @bind-Value="OrderModel.Price" @onclick="() => CandlesExpanded = false" />
	</label>
@* 	<ValidationMessage For="() => OrderModel.Price" />
 *@</div>


<div>
	<button type="button" @onclick="SaveOrder">Зберегти</button>
</div>

<p> indentation between buttons </p>

<div>
	<button type="button" @onclick="() => DeleteOrderById(Id)">Видалити замовлення</button>
</div>


<p>@MessageResponse</p>
@code {

	[Parameter]
	public int Id { get; set; }

	public string MessageResponse { get; set; } = "";

	// new fixes the rendering error because in OnInitializedAsync it is later initialized, not at the start of rendering page
	public NewOrderFormModel OrderModel { get; set; } = new();

	// needed to display them when adding new candle to order
	public IEnumerable<CandleFullVM> Candles { get; set; } = new List<CandleFullVM>();

	// get all chosen candles with quantity > 0
	public List<CandleOrdered> CandlesOrdered { get; set; } = new List<CandleOrdered>();


	// expand/hide candles to add them
	private bool CandlesExpanded { get; set; } = false;


	private OrderVM? _orderVM = new();


	protected override async Task OnInitializedAsync()
	{
		_orderVM = await orderHandler.GetOrderAsync($"api/order/oid={Id}");
		OrderModel = _orderVM?.ConvertToOrderModel_FromFullVM() ?? new NewOrderFormModel();

		Candles = await candleHandler.GetAllCandlesListAsync("api/candle?view=full");
		foreach(var candle in Candles)
		{
			CandlesOrdered.Add(new CandleOrdered
				{
					Id = candle.Id,
					Name = candle.Name,
					Price = candle.SellPrice,
					Quantity = 0,
					TotalSum = 0,
					WaxNeededGramm = candle.WaxNeededGram,
					WickDiameterCM = candle.WickDiameterCM
				});
		}


		// key - candleId
		// value - quantity of candle
		foreach(var c in OrderModel.CandleIdAndQuantity)
		{
			var index = CandlesOrdered.FindIndex(o => o.Id == c.Key);
			CandlesOrdered[index].Quantity = c.Value;
			CandlesOrdered[index].TotalSum = CandlesOrdered[index].Quantity * CandlesOrdered[index].Price;
		}

	}


	public async Task SaveOrder()
	{
		// clear all entrances of added candles
		OrderModel.CandleIdAndQuantity.Clear();

		// converting all ordered candles which has quantity more than 0 to the dictionary of OrderModel
		foreach (var candle in CandlesOrdered)
		{
			if (candle.Quantity > 0)
			{
				OrderModel.CandleIdAndQuantity.Add(candle.Id, candle.Quantity);
			}
		}

		var orderToUpd = OrderModel.ConvertToFullVM_FromFormModel();
		orderToUpd.Id = Id;

		/* validation here */


		// submitting to api
		var result = await orderHandler.UpdateOrderAsync($"api/order/oid={Id}", orderToUpd);

		if(result)
		{
			MessageResponse = "Замовлення збережено.";
			OrderModel = new();
		}
		else
		{
			MessageResponse = "Помилка при збереженні замовлення. Спробуйте ще раз.";
		}

	}


	public async Task DeleteOrderById(int orderId)
	{
		var result = await orderHandler.DeleteOrderAsync($"api/order/oid={orderId}");
		MessageResponse = result switch
		{
			true => "Замовлення видалено.",
			false => "Помилка при видаленні замовлення. Спробуйте ще раз.",
		};
	}


	// functions for increasing/decreasing counter 
	public void IncreaseCounterForChosenCandle(MouseEventArgs args, CandleOrdered candle)
	{
		candle.Quantity++;
		candle.TotalSum += candle.Price;
		OrderModel.Price += candle.Price;
	}
	public void DecreaseCounterFoChosenCandle(MouseEventArgs args, CandleOrdered candle)
	{
		if(candle.Quantity > 0 && candle.TotalSum >= candle.Price)
		{
			candle.Quantity--;
			candle.TotalSum -= candle.Price;
			OrderModel.Price -= candle.Price;

			OrderModel.Price = OrderModel.Price < 0 ? 0 : OrderModel.Price;
		}
	}


	// could be 10% or 10 (means -10 grn)
	public void UsePromocode(MouseEventArgs args, string? promocodeValue)
	{
		if(promocodeValue is null)
		{
			return;
		}

		string trimmed = promocodeValue.Trim();
		decimal value = 0;
		if (trimmed.EndsWith('%'))
		{
			bool result = decimal.TryParse(promocodeValue[..^1], out value);
			if (result)
			{
				var howmuch = value * OrderModel.Price / 100;
				OrderModel.Price -= howmuch;
			}
		}
		else
		{

			bool result = decimal.TryParse(promocodeValue, out value);
			if (result && OrderModel.Price > value)
			{
				OrderModel.Price -= value;
			}
		}
	}


}



