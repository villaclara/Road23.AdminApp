@page "/order/{Id:int}"
@using AdminApp.WASM.Models;
@inject OrderHandlerService orderHandler;
@inject CandleHandlerService candleHandler;



<h3>Редагувати замовлення</h3>

<AdminApp.WASM.Components.NavigationComponents.ReturnBackButtonComponent FromPageReached="order"/>


<EditForm Model="OrderModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
	<DataAnnotationsValidator />
	<OrderAsInputFields OrderModel="OrderModel" Candles="Candles" CandlesOrdered="CandlesOrdered" />

	<div>
		<button>Зберегти зміни</button>
	</div>
</EditForm>


<p> indentation between buttons </p>

<div>
	<button type="button" @onclick="() => DeleteOrderById(Id)">Видалити замовлення</button>
</div>


<p>@MessageResponse</p>
@code {

	[Parameter]
	public int Id { get; set; }

	public string MessageResponse { get; set; } = "";

	// new fixes the rendering error because in OnInitializedAsync it is later initialized, not at the start of rendering page
	public NewOrderFormModel OrderModel { get; set; } = new();

	// needed to display them when adding new candle to order
	public IEnumerable<CandleFullVM> Candles { get; set; } = new List<CandleFullVM>();

	// get all chosen candles with quantity > 0
	public List<CandleOrdered> CandlesOrdered { get; set; } = new List<CandleOrdered>();


	// expand/hide candles to add them
	private bool CandlesExpanded { get; set; } = false;


	private OrderVM? _orderVM = new();


	protected override async Task OnInitializedAsync()
	{
		_orderVM = await orderHandler.GetOrderAsync($"api/order/oid={Id}");
		OrderModel = _orderVM?.ConvertToOrderModel_FromFullVM() ?? new NewOrderFormModel();

		Candles = await candleHandler.GetAllCandlesListAsync("api/candle?view=full");
		

	}


	public async Task DeleteOrderById(int orderId)
	{
		var result = await orderHandler.DeleteOrderAsync($"api/order/oid={orderId}");
		MessageResponse = result switch
		{
			true => "Замовлення видалено.",
			false => "Помилка при видаленні замовлення. Спробуйте ще раз.",
		};
	}



	public async Task HandleValidSubmit()
	{
		// clear all instances of added candles
		OrderModel.CandleIdAndQuantity.Clear();

		// converting all ordered candles which has quantity more than 0 to the dictionary of OrderModel
		foreach (var candle in CandlesOrdered)
		{
			if (candle.Quantity > 0)
			{
				OrderModel.CandleIdAndQuantity.Add(candle.Id, candle.Quantity);
			}
		}

		var orderToUpd = OrderModel.ConvertToFullVM_FromFormModel();
		orderToUpd.Id = Id;

		/* validation here */


		// submitting to api
		var result = await orderHandler.UpdateOrderAsync($"api/order/oid={Id}", orderToUpd);

		if (result)
		{
			MessageResponse = "Замовлення збережено.";
			OrderModel = new();
		}
		else
		{
			MessageResponse = "Помилка при збереженні замовлення. Спробуйте ще раз.";
		}
	}

	public void HandleInvalidSubmit()
	{
		MessageResponse = "Некоректно введені дані.";
	}
}



