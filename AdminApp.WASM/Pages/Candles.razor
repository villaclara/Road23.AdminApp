@page "/candle"
@using AdminApp.WASM.Application.IndexedDB;
@layout CandlesLayout
@inject HttpClient client;
@inject NavigationManager navmanager;
@inject CandleHandlerService candleHandler;
@inject IndexedDBAccessor indexedDBAccessor;

<span></span>
<div class="container">

	<div class="container">
		<h1 class="display-4">Свічки</h1>
	</div>

	<div class="container">
		<a href="/candle/new-candle" class="add-candle btn">
			<span class="bi bi-patch-plus" aria-hidden="true"></span> Додати свічку
		</a>
	</div>

	@if (CandlesExpanded is not null && CandlesExpanded.Any())
	{
		<div class="container-fluid">
			<table class="table table-hover align-middle">
				<thead>
					<tr>
						<th scope="col" class="col-2">Id</th>
						<th scope="col" class="col-7">Назва </th>
						<th scope="col" class="col-3"></th>
					</tr>
				</thead>

				<tbody>
					@foreach (var can in CandlesExpanded)
					{
						<tr style="cursor:pointer" @onclick="() => can.Expanded = !can.Expanded">
							<td class="col-2"> @can.CandleItem.Id </td>
							<td class="col-7"> @can.CandleItem.Name </td>
							<td class="col-3">
								<div class="d-grid gap-2">
								<button type="button" class="btn btn-secondary" @onclick="() => EditCandle(can.CandleItem.Id)">
									<span class="oi oi-pencil" aria-hidden="true"></span>
								</button>
								</div>
							</td>
						</tr>
						@if (can.Expanded)
						{
							<tr>
								<td colspan="3" class="col-12 lighter-back">
									<CascadingValue Value="can.CandleItem">
										<CandleFullInfoAsTable />
									</CascadingValue>
								</td>
							</tr>
						}
					}
				</tbody>

			</table>
		</div>
	}
	else
	{
		<p> Loading... </p>
	}


</div>

<p>@MessageIndexedDB</p>


@code {
	private string path = $"api/Candle?view=full";

	public IEnumerable<CandleFullVM>? CandleList { get; set; }

	//public override async Task SetParametersAsync(ParameterView paramss)
	//{
	//	CandleList = await client.GetFromJsonAsync<IEnumerable<CandleBasicVM>>(path);
	//}

	public ICollection<CandleWithExpanded> CandlesExpanded { get; set; } = new List<CandleWithExpanded>();

	public string MessageIndexedDB { get; set; } = "no candles retrieved";

	protected override async Task OnInitializedAsync()
	{

		var candlesFromIndexedDB = await indexedDBAccessor.GetAllValuesAsync<IEnumerable<CandleFullVM>>("candles");

		if (candlesFromIndexedDB.Any())
		{
			CandleList = candlesFromIndexedDB;
			MessageIndexedDB = "candles retrieved from indexed db";
		}
		else
		{
			CandleList = await candleHandler.GetAllCandlesListAsync(path);
			MessageIndexedDB = "candles from web api";
		}
		foreach (var c in CandleList)
		{
			CandlesExpanded.Add(new CandleWithExpanded(c, false));
		}

	}

	public void EditCandle(int candleId)
	{
		navmanager.NavigateTo($"candle/{candleId}");
	}


	public class CandleWithExpanded
	{
		public CandleFullVM CandleItem { get; set; }
		public bool Expanded { get; set; } = false;

		public CandleWithExpanded(CandleFullVM c, bool value)
		{
			CandleItem = c;
			Expanded = value;
		}
	}

}
