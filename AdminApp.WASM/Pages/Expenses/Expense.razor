@page "/expense"
@inject ExpenseHandlerService expenseHandler;
@layout ExpenseLayout;

<div class="container">


	<MessageResponseComponent MessageResponse="@MessageResponse" />

	<div class="row mb-2">
		<div class="form-floating gx-1 text-secondary">
			<InputText class="form-control montserat" @bind-Value="NewExpenseForm.Description" placeholder="Опис" id="floatingDescription" />
			<label for="floatingDescription">Опис</label>
		</div>
	</div>

	<div class="row">
		<div class="input-group mb-3">
			<InputDate class="form-control text-center" @bind-Value="NewExpenseForm.Date" />
			<span class="input-group-text montserat">Сума</span>
			<div class="col-3">
				<InputNumber class="form-control text-end" @bind-Value="NewExpenseForm.Cost" />
			</div>
			<span class="input-group-text montserat">₴</span>
		</div>
	</div>

	<div class="row">
		<div class="col">
			<div class="d-grid montserat">
				<button class="btn btn-sm btn-secondary" @onclick="AddExpenseClick">Додати витрату</button>
			</div>
		</div>
	</div>
</div>

<hr />

<div class="container">

@foreach (var month in MonthList)
{

		<div class="row border-top border-dark montserat fw-bold">
		<div class="col-2">
		</div>
		<div class="col">
			<span>
				@CastMonthIdToUAMonthName(month.Month) @month.Year
			</span>
		</div>
	</div>

	@foreach (var expense in Expenses.OrderByDescending(e => e.Date))
	{
		if (expense.Date.Month == month.Month)
		{
			<div class="row ubuntu py-2">
				<div class="col-2 ps-1">
					<span>
						@expense.Date.ToString("dd/MM")
					</span>
				</div>

				<div class="col-6">
					<span>
						@expense.Description
					</span>
				</div>

				<div class="col-3">
					&#8372 @expense.Cost
				</div>

				<div class="col-1 ps-0">
					<button type="button" class="btn btn-sm" @onclick="() => DeleteExpense(expense)">
						<span class="bi bi-trash3"></span>
					</button>
				</div>
			</div>


		}
	}

	@* <table class="table">
		<thead>
			<tr class="border-top border-dark">
				<th class="montserat border border-top-0 border-bottom-0 border-start-0 border-end-0"></th>
				<th class="montserat border border-top-0 border-bottom-0 border-start-0 border-end-0" colspan="3">@CastMonthIdToUAMonthName(month.Month) @month.Year</th>
			</tr>
		</thead>
		<tbody>


			@foreach (var expense in Expenses.OrderByDescending(e => e.Date))
			{
				if (expense.Date.Month == month.Month)
				{

					<tr class="ubuntu border-bottom border-dark">
						<td class="col-2 my-auto">@expense.Date.ToString("dd/MM")</td>
						<td class="col-6 my-auto">@expense.Description</td>
						<td class="col-3 my-auto">&#8372 @expense.Cost</td>
						<td class="col-1 my-auto">
							<button type="button" class="btn btn-sm" @onclick="() => DeleteExpense(expense)">
								<span class="bi bi-trash3"></span>
							</button>
						</td>
					</tr>
				}
			}
		</tbody>
	</table> *@

}
</div>



@code {

	private string _url = "api/expense";

	public List<ExpenseVM> Expenses { get; set; } = new List<ExpenseVM>();

	public List<ExpenseVM> AllExpenses { get; set; } = new List<ExpenseVM>();

	public NewExpenseFormModel NewExpenseForm { get; set; } = new NewExpenseFormModel { Date = DateOnly.FromDateTime(DateTime.Now) };

	// to have each month where expense was added as separate object
	public List<DateOnly> MonthList { get; set; } = new List<DateOnly>();

	public string MessageResponse { get; set; } = "";

	protected override async Task OnInitializedAsync()
	{
		AllExpenses = (List<ExpenseVM>)await expenseHandler.GetExpensesAsync(_url);
		Expenses = AllExpenses;

		// getting only distinct months from all expenses and ordering by descending
		MonthList = AllExpenses.Select(e => new DateOnly(e.Date.Year, e.Date.Month, 1)).Distinct().OrderDescending().ToList();
	}

	public async Task AddExpenseClick()
	{
		var expense = new ExpenseVM()
			{
				Cost = NewExpenseForm.Cost,
				Date = NewExpenseForm.Date,
				Description = NewExpenseForm.Description
			};

		var result = await expenseHandler.AddExpenseAsync(_url, expense);
		if (result)
		{
			Expenses.Add(expense);
			NewExpenseForm = new() { Date = DateOnly.FromDateTime(DateTime.Now) };
			MessageResponse = "";
		}
		else
		{
			MessageResponse = "Помилка при додаванні. Спробуйте ще.";
		}
	}

	public async Task DeleteExpense(ExpenseVM expenseVM)
	{
		string adress = "api/expense/eid=" + expenseVM.Id;
		var result = await expenseHandler.DeleteExpenseAsync(adress);
		if (result)
		{
			MessageResponse = "";
			AllExpenses = (List<ExpenseVM>)await expenseHandler.GetExpensesAsync(_url);
			Expenses = AllExpenses;
		}
		else
		{
			MessageResponse = "Сталась помилка. Спробуйте ще";
		}
	}

	public string CastMonthIdToUAMonthName(int monthId)
	{
		UAMonthNames month = (UAMonthNames)monthId;
		return month.ToString();
	}
}
