@page "/"
@using AdminApp.WASM.Interfaces;
@inject HttpClient hclient;
@inject IHttpCheckerService checker;

<PageTitle>Road23 Home</PageTitle>

<h3> Welcome </h3>

<article>
	<div>
		<NavLink class="nav-link" href="orders">
			Останні замовлення
		</NavLink>
	</div>
	<div>
		<table class="table">
			<thead>
				<tr>
					<th>Id</th>
					<th>ПІБ</th>
					<th>Номер телефону</th>
					<th>Сума</th>
				</tr>
			</thead>
			<tbody>
				@if (!LastOrders.Any())
				{
					<tr>No orders</tr>
				}
				else
				{
					@foreach (var order in LastOrders)
					{
						<tr>
							<td>@order.Id</td>
							<td>@order.Receiver.FullName</td>
							<td>@order.Receiver.PhoneNumber</td>
							<td>@order.TotalSum</td>
						</tr>
					}
				}
			</tbody>
		</table>
	</div>
</article>

<article>
	<div>
		<NavLink class="nav-link" href="/candles">
			Свічки
		</NavLink>
	</div>
	<div>
		<table class="table">
			<thead>
				<tr>
					<th>Id</th>
					<th>Назва</th>
					<th>Ціна</th>
				</tr>
			</thead>
			<tbody>
				@if (!LastCandles.Any())
				{
					<tr>No candles</tr>
				}
				else
				{
					@foreach (var candle in LastCandles)
					{
						<tr>
							<td>@candle.Id</td>
							<td>@candle.Name</td>
							<td>@candle.SellPrice</td>
						</tr>
					}
				}
			</tbody>
		</table>
	</div>
</article>

<h3> status code - @StatusCode</h3>
<h3> status code2 - @StatusCode2</h3>
@code {
	public IEnumerable<OrderVM> LastOrders { get; set; } = new List<OrderVM>();
	public IEnumerable<CandleFullVM> LastCandles { get; set; } = new List<CandleFullVM>();
	public string StatusCode { get; set; }
	public string StatusCode2 { get; set; }


	protected override async Task OnInitializedAsync()
	{
		HttpResponseMessage responseMessage = await hclient.GetAsync("api/order");
		if (responseMessage.IsSuccessStatusCode)
		{
			var orders = await hclient.GetFromJsonAsync<IEnumerable<OrderVM>>("api/order");

			if (orders is not null && orders.Count() <= 5)
			{
				LastOrders = orders.OrderByDescending(o => o.OrderDate);
			}
			else if (orders.Count() > 5)
			{
				LastOrders = orders.OrderByDescending(o => o.OrderDate).Take(5);
			}
		}

		responseMessage = await hclient.GetAsync("api/candle?view=full");
		if(responseMessage.IsSuccessStatusCode)
		{
			var candles = await hclient.GetFromJsonAsync<IEnumerable<CandleFullVM>>("api/candle?view=full");
			if (candles is not null && candles.Count() <= 5)
			{
				LastCandles = candles.OrderByDescending(c => c.Id);
			}
			else if (candles.Count() > 5)
			{
				LastCandles = candles.OrderByDescending(c => c.Id).Take(5);
			}
		}

		var response = await checker.CheckCandlesExistAsync();
		StatusCode = response.StatusCode.ToString();
		response = await checker.CheckOrdersExistAsync();
		StatusCode2 = response.StatusCode.ToString();
	}
}