@page "/"
@using AdminApp.WASM.Interfaces;
@inject HttpClient hclient;
@inject IHttpCheckerService checker;

<PageTitle>Road23 Home</PageTitle>

<h3> Welcome </h3>

<article>
	<div>
		<NavLink class="nav-link" href="orders">
			Останні замовлення
		</NavLink>
	</div>
	<div>
		<table class="table">
			<thead>
				<tr>
					<th>Id</th>
					<th>ПІБ</th>
					<th>Номер телефону</th>
					<th>Сума</th>
				</tr>
			</thead>
			<tbody>
				@if (!LastOrders.Any())
				{
					<tr>@OrdersLoadingMessage</tr>
				}
				else
				{
					@foreach (var order in LastOrders)
					{
						<tr>
							<td>@order.Id</td>
							<td>@order.Receiver.FullName</td>
							<td>@order.Receiver.PhoneNumber</td>
							<td>@order.TotalSum</td>
						</tr>
					}
				}
			</tbody>
		</table>
	</div>
</article>

<article>
	<div>
		<NavLink class="nav-link" href="/candles">
			Свічки
		</NavLink>
	</div>
	<div>
		<table class="table">
			<thead>
				<tr>
					<th>Id</th>
					<th>Назва</th>
					<th>Ціна</th>
				</tr>
			</thead>
			<tbody>
				@if (!LastCandles.Any())
				{
					<tr>@CandlesLoadingMessage</tr>
				}
				else
				{
					@foreach (var candle in LastCandles)
					{
						<tr>
							<td>@candle.Id</td>
							<td>@candle.Name</td>
							<td>@candle.SellPrice</td>
						</tr>
					}
				}
			</tbody>
		</table>
	</div>
</article>

<h3> status code - @OrdersLoadingMessage</h3>
<h3> status code2 - @CandlesLoadingMessage</h3>

@code {
	public IEnumerable<OrderVM> LastOrders { get; set; } = new List<OrderVM>();
	public IEnumerable<CandleFullVM> LastCandles { get; set; } = new List<CandleFullVM>();

	// Message 'Loading...' or 'No {item}' displayed in the Table
	public string OrdersLoadingMessage { get; set; } = "Loading...";
	public string CandlesLoadingMessage { get; set; } = "Loading...";

	// strings to HttpChecker to get if the items exist by path
	private string _ordersPath = "api/order";
	private string _candlesPath = "api/candle?view=full";

	// const for pattern matching 
	// to display 5 last Candles and 5 last Orders
	private const int AMOUNT_ITEMS = 5;

	protected override async Task OnInitializedAsync()
	{
		// var ordersExist = await checker.CheckItemExistsByPathAsync(_ordersPath);
		// var candlesExist = await checker.CheckItemExistsByPathAsync(_candlesPath);

		// if (!ordersExist)
		// {
		// 	OrdersLoadingMessage = "Немає замовлень.";
		// }
		// else
		// {
		// 	var orders = await hclient.GetFromJsonAsync<IEnumerable<OrderVM>>(_ordersPath)!;
		// 	LastOrders = orders?.Count() switch
		// 	{
		// 		>= AMOUNT_ITEMS => orders.OrderByDescending(o => o.OrderDate).Take(5),
		// 		> 0 and < AMOUNT_ITEMS => orders.OrderByDescending(o => o.OrderDate),
		// 		_ => Enumerable.Empty<OrderVM>() 
		// 	};
		// }

		// if(!candlesExist)
		// {
		// 	CandlesLoadingMessage = "Немає свічок.";
		// }
		// else
		// {
		// 	var candles = await hclient.GetFromJsonAsync<IEnumerable<CandleFullVM>>(_candlesPath)!;
		// 	LastCandles = candles?.Count() switch
		// 	{
		// 		>= AMOUNT_ITEMS => candles.OrderByDescending(c => c.Id).Take(5),
		// 		> 0 and < AMOUNT_ITEMS => candles.OrderByDescending(c => c.Id),
		// 		_ => Enumerable.Empty<CandleFullVM>()
		// 	};
		// }

		try
		{
			var orders = await hclient.GetFromJsonAsync<IEnumerable<OrderVM>>(_ordersPath);
			
			if(orders != null)
				LastOrders = orders.ToList();
		}
		catch (Exception ex)
		{
			OrdersLoadingMessage = ex.Message;
		}

	}

	

}